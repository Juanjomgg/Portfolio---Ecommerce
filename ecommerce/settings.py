"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-0j!@ydvr$px_@yr0v9v+ib!gqbfaetat6xggolg7_&bln(e9y='

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True

ALLOWED_HOSTS = [
    'portfolio-ecommerce.onrender.com',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',  # For serving static files in development
    'ninja',
    'api',
    'corsheaders',  # Django CORS Headers
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import os
from dotenv import load_dotenv
import dj_database_url

load_dotenv()

SECRET_KEY=os.getenv('SECRET_KEY', "clave_por_defecto")
DEBUG= os.getenv('DEBUG', 'False').lower() == 'true'


# Database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Try to use DATABASE_URL if it is configured
database_url = os.getenv('DATABASE_URL')
if database_url:
    try:
        DATABASES['default'] = dj_database_url.parse(database_url, conn_max_age=600)
    except Exception as e:
        print(f"Error connecting to PostgreSQL: {e}")
        print("Falling back to SQLite...")

AUTH_USER_MODEL = 'api.CustomUser'  # Usar el modelo de usuario personalizado

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Habilitar el almacenamiento de WhiteNoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # En desarrollo, cambiar en producción
CORS_ALLOW_CREDENTIALS = True  # Importante para enviar cookies
CORS_ALLOWED_ORIGINS = [
    "http://localhost",
    "http://localhost:8000",
    "http://127.0.0.1",
    "http://127.0.0.1:8000",
    "https://portfolio-ecommerce.onrender.com",
]
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^https://.*\.onrender\.com$",
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
CORS_EXPOSE_HEADERS = ['content-type', 'x-csrftoken']
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 horas

# Configuración de cookies
SESSION_COOKIE_SECURE = True  # Solo enviar cookies por HTTPS
CSRF_COOKIE_SECURE = True  # Solo enviar cookies CSRF por HTTPS
SESSION_COOKIE_HTTPONLY = True  # Prevenir acceso a cookies via JavaScript
CSRF_COOKIE_HTTPONLY = True  # Prevenir acceso a cookies CSRF via JavaScript
CSRF_COOKIE_SAMESITE = 'Lax'  # Protección contra CSRF
SESSION_COOKIE_SAMESITE = 'Lax'  # Protección contra CSRF

# JWT Settings
NINJA_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'AUTH_COOKIE': 'refresh_token',  # Nombre de la cookie del refresh token
    'AUTH_COOKIE_DOMAIN': None,  # Dominio de la cookie (None = mismo dominio)
    'AUTH_COOKIE_SECURE': True,  # Cookie solo por HTTPS
    'AUTH_COOKIE_HTTP_ONLY': True,  # Cookie no accesible por JavaScript
    'AUTH_COOKIE_PATH': '/api/users/token/refresh',  # Path de la cookie
    'AUTH_COOKIE_SAMESITE': 'Lax',  # Protección contra CSRF
}

AUTHENTICATION_BACKENDS = [
    'api.email_backend.EmailBackend',  # Login por email
    'django.contrib.auth.backends.ModelBackend',  # Login por username (fallback)
]

# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}